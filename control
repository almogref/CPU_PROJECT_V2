		-- control module (implements MIPS control unit)
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_SIGNED.ALL;

ENTITY control IS
   PORT( 	
	Opcode 		: IN 	STD_LOGIC_VECTOR( 5 DOWNTO 0 );
        reg_miner	: OUT 	STD_LOGIC;
	NibEmpWrite      : OUT STD_LOGIC;
	send		 : OUT STD_LOGIC;
	sha 		: OUT 	STD_LOGIC;
	reti		: OUT 	STD_LOGIC;
	RegDst 		: OUT 	STD_LOGIC;
	ALUSrc 		: OUT 	STD_LOGIC;
	MemtoReg 	: OUT 	STD_LOGIC;
	RegWrite 	: OUT 	STD_LOGIC;
	MemRead 	: OUT 	STD_LOGIC;
	MemWrite 	: OUT 	STD_LOGIC;
	Branch 		: OUT 	STD_LOGIC;
	bne		: OUT 	STD_LOGIC; 
	line_end	 : IN std_logic;
	branch_line_end  : OUT std_logic;
	ALUop 		: OUT 	STD_LOGIC_VECTOR( 1 DOWNTO 0 );
	clock, reset	: IN 	STD_LOGIC );

END control;

ARCHITECTURE behavior OF control IS

	SIGNAL  R_format, Lw, Sw, Beq,Snib,branch_line 	: STD_LOGIC;

BEGIN           
				-- Code to generate control signals using opcode bits
	R_format 	<=  '1'  WHEN  Opcode = "000000"  ELSE '0';
	Lw         	 <=  '1'  WHEN  Opcode = "100011"  ELSE '0';
 	Sw         	 <=  '1'  WHEN  Opcode = "101011"  ELSE '0';
   	Beq        	 <=  '1'  WHEN  Opcode = "000100"  ELSE '0';
	bne        	 <=  '1'  WHEN  Opcode = "000101"  ELSE '0';
	reg_miner  	<=  '1'  WHEN  Opcode = "100000"  ELSE '0'; --FIXME
	NibEmpWrite 	<=  '1'  WHEN  Opcode = "010000"  ELSE '0'; --FIXME
	sha		<=  '1'  WHEN  Opcode = "001110"  ELSE '0'; --FIXME
	Snib 		<=  '1'	 When  Opcode = "101001"  ELSE '0'; --FIXME
	branch_line 	<=  '1'  WHEN  Opcode = "000110"  ELSE '0'; --FIXME
	reti		<= 	'1' When Opcode = "001011"  ELSE '0'; --FIXME
	branch_line_end <=  branch_line AND line_end;
	send 		<=  Snib;
  	RegDst    	<=  R_format;
 	ALUSrc  	<=  Lw OR Sw OR Snib;
	MemtoReg 	<=  Lw;
  	RegWrite 	<=  R_format OR Lw;
  	MemRead 	<=  Lw;
   	MemWrite 	<=  Sw; 
 	Branch      	<=  Beq;
	ALUOp( 1 ) 	<=  R_format;
	ALUOp( 0 ) 	<=  Beq; 

   END behavior;

